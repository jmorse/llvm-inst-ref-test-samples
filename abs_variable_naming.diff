diff --git a/llvm/tools/llvm-dwarfdump/Statistics.cpp b/llvm/tools/llvm-dwarfdump/Statistics.cpp
index 82da06eab1d..f19f8bbff8d 100644
--- a/llvm/tools/llvm-dwarfdump/Statistics.cpp
+++ b/llvm/tools/llvm-dwarfdump/Statistics.cpp
@@ -6,6 +6,8 @@
 //
 //===----------------------------------------------------------------------===//
 
+#include <iostream>
+
 #include "llvm-dwarfdump.h"
 #include "llvm/ADT/DenseMap.h"
 #include "llvm/ADT/StringExtras.h"
@@ -210,7 +212,7 @@ static uint64_t calculateOverlap(DWARFAddressRange A, DWARFAddressRange B) {
 }
 
 /// Collect debug info quality metrics for one DIE.
-static void collectStatsForDie(DWARFDie Die, std::string FnPrefix,
+static void collectStatsForDie(DWARFDie Die, std::string FnPrefix, std::string jeremyprefix,
                                std::string VarPrefix, uint64_t BytesInScope,
                                uint32_t InlineDepth,
                                StringMap<PerFunctionStats> &FnStatMap,
@@ -365,6 +367,9 @@ static void collectStatsForDie(DWARFDie Die, std::string FnPrefix,
 
   FnStats.TotalVarWithLoc += (unsigned)HasLoc;
 
+if (HasLoc)
+std::cout << "Var: " << jeremyprefix << "/" << constructDieID(Die) << std::endl;
+
   if (Die.find(dwarf::DW_AT_artificial)) {
     FnStats.NumArtificial++;
     return;
@@ -390,7 +395,7 @@ static void collectStatsForDie(DWARFDie Die, std::string FnPrefix,
 }
 
 /// Recursively collect debug info quality metrics.
-static void collectStatsRecursive(DWARFDie Die, std::string FnPrefix,
+static void collectStatsRecursive(DWARFDie Die, std::string FnPrefix, std::string jeremyprefix,
                                   std::string VarPrefix, uint64_t BytesInScope,
                                   uint32_t InlineDepth,
                                   StringMap<PerFunctionStats> &FnStatMap,
@@ -405,6 +410,11 @@ static void collectStatsRecursive(DWARFDie Die, std::string FnPrefix,
   const bool IsFunction = Tag == dwarf::DW_TAG_subprogram;
   const bool IsBlock = Tag == dwarf::DW_TAG_lexical_block;
   const bool IsInlinedFunction = Tag == dwarf::DW_TAG_inlined_subroutine;
+
+if (IsFunction) {
+std::cout << "GOOD MORNING " << constructDieID(Die) << std::endl;
+}
+
   if (IsFunction || IsInlinedFunction || IsBlock) {
 
     // Reset VarPrefix when entering a new function.
@@ -452,6 +462,7 @@ static void collectStatsRecursive(DWARFDie Die, std::string FnPrefix,
           Die.findRecursively(dwarf::DW_AT_decl_line))
         FnStats.HasSourceLocation = true;
       // Update function prefix.
+jeremyprefix = jeremyprefix + std::string("/") + FnID;
       FnPrefix = FnID;
     }
 
@@ -464,7 +475,7 @@ static void collectStatsRecursive(DWARFDie Die, std::string FnPrefix,
     }
   } else {
     // Not a scope, visit the Die itself. It could be a variable.
-    collectStatsForDie(Die, FnPrefix, VarPrefix, BytesInScope, InlineDepth,
+    collectStatsForDie(Die, FnPrefix, jeremyprefix, VarPrefix, BytesInScope, InlineDepth,
                        FnStatMap, GlobalStats, LocStats);
   }
 
@@ -485,7 +496,8 @@ static void collectStatsRecursive(DWARFDie Die, std::string FnPrefix,
     if (Child.getTag() == dwarf::DW_TAG_formal_parameter)
       ChildVarPrefix += 'p' + toHex(FormalParameterIndex++) + '.';
 
-    collectStatsRecursive(Child, FnPrefix, ChildVarPrefix, BytesInScope,
+    std::string tmpprefix = jeremyprefix + std::string("/") + VarPrefix;
+    collectStatsRecursive(Child, FnPrefix, tmpprefix, ChildVarPrefix, BytesInScope,
                           InlineDepth, FnStatMap, GlobalStats, LocStats);
     Child = Child.getSibling();
   }
@@ -560,7 +572,7 @@ bool dwarfdump::collectStatsForObjectFile(ObjectFile &Obj, DWARFContext &DICtx,
   StringMap<PerFunctionStats> Statistics;
   for (const auto &CU : static_cast<DWARFContext *>(&DICtx)->compile_units())
     if (DWARFDie CUDie = CU->getNonSkeletonUnitDIE(false))
-      collectStatsRecursive(CUDie, "/", "g", 0, 0, Statistics, GlobalStats,
+      collectStatsRecursive(CUDie, "/", "/", "g", 0, 0, Statistics, GlobalStats,
                             LocStats);
 
   /// Collect the sizes of debug sections.
